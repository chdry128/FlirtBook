// Mocks generated by Mockito 5.4.6 from annotations
// in flirtbook/test/openai_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:connectivity_plus/connectivity_plus.dart' as _i7;
import 'package:connectivity_plus_platform_interface/connectivity_plus_platform_interface.dart'
    as _i8;
import 'package:flirtbook/girl_profile.dart' as _i4;
import 'package:flirtbook/nvidia_ai_service.dart' as _i2;
import 'package:flirtbook/shared_preference.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [NvidiaAIService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNvidiaAIService extends _i1.Mock implements _i2.NvidiaAIService {
  MockNvidiaAIService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String> generateFlirtyMessage({
    required _i4.GirlProfile? profile,
    required String? tone,
    String? context = '',
  }) =>
      (super.noSuchMethod(
            Invocation.method(#generateFlirtyMessage, [], {
              #profile: profile,
              #tone: tone,
              #context: context,
            }),
            returnValue: _i3.Future<String>.value(
              _i5.dummyValue<String>(
                this,
                Invocation.method(#generateFlirtyMessage, [], {
                  #profile: profile,
                  #tone: tone,
                  #context: context,
                }),
              ),
            ),
          )
          as _i3.Future<String>);
}

/// A class which mocks [SharedPrefs].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPrefs extends _i1.Mock implements _i6.SharedPrefs {
  MockSharedPrefs() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> saveProfile(String? key, String? value) =>
      (super.noSuchMethod(
            Invocation.method(#saveProfile, [key, value]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<String>> getAllKeys() =>
      (super.noSuchMethod(
            Invocation.method(#getAllKeys, []),
            returnValue: _i3.Future<List<String>>.value(<String>[]),
          )
          as _i3.Future<List<String>>);

  @override
  _i3.Future<String?> loadProfile(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#loadProfile, [key]),
            returnValue: _i3.Future<String?>.value(),
          )
          as _i3.Future<String?>);

  @override
  _i3.Future<void> clearAllProfiles() =>
      (super.noSuchMethod(
            Invocation.method(#clearAllProfiles, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteProfile(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#deleteProfile, [key]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [Connectivity].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivity extends _i1.Mock implements _i7.Connectivity {
  MockConnectivity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<List<_i8.ConnectivityResult>> get onConnectivityChanged =>
      (super.noSuchMethod(
            Invocation.getter(#onConnectivityChanged),
            returnValue: _i3.Stream<List<_i8.ConnectivityResult>>.empty(),
          )
          as _i3.Stream<List<_i8.ConnectivityResult>>);

  @override
  _i3.Future<List<_i8.ConnectivityResult>> checkConnectivity() =>
      (super.noSuchMethod(
            Invocation.method(#checkConnectivity, []),
            returnValue: _i3.Future<List<_i8.ConnectivityResult>>.value(
              <_i8.ConnectivityResult>[],
            ),
          )
          as _i3.Future<List<_i8.ConnectivityResult>>);
}
